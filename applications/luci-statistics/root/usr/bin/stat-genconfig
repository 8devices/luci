#!/usr/bin/lua

--[[

Luci statistics - collectd configuration generator
(c) 2008 Freifunk Leipzig / Jo-Philipp Wich <xm@leipzig.freifunk.net>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

$Id$

]]--


require("ffluci.model.uci")
require("ffluci.sys.iptparser")
require("ffluci.util")

local ipt = ffluci.sys.iptparser.IptParser()
local uci = ffluci.model.uci.Session()
local sections, names = uci:sections( "luci_statistics" )


function section( plugin )

	local config = sections[ "collectd_" .. plugin ] or sections["general"]

	if type(config) == "table" and ( plugin == "general" or config.enable == "1" ) then

		local params = ""

		if type( plugins[plugin] ) == "function" then
			params = plugins[plugin]( config )
		else
			params = config_generic( config, plugins[plugin][1], plugins[plugin][2], plugins[plugin][3], plugin == "general" )
		end


		if plugin ~= "general" then
			print( "LoadPlugin " .. plugin )

			if params:len() > 0 then
				print( "<Plugin " .. plugin .. ">\n" .. params .. "</Plugin>\n" )
			else
				print( "" )
			end
		else
			print( params .. "\n" )
		end
	end
end

function config_generic( c, singles, bools, lists, nopad )
	local str = ""

	if type(c) == "table" then

		if type(singles) == "table" then
			for i, key in ipairs( singles ) do
				str = str .. _string( c[key], key, nopad )
			end
		end

		if type(bools) == "table" then
			for i, key in ipairs( bools ) do
				str = str .. _bool( c[key], key, nopad )
			end
		end

		if type(lists) == "table" then
			str = str .. _list_expand( c, lists, nopad )
		end
	end

	return str
end

function config_exec( c )
	local str = ""

	for s in pairs(sections) do
		for key, type in pairs({ Exec="collectd_exec_input", NotificationExec="collectd_exec_notify" }) do
			if sections[s][".type"] == type then

				cmd   = sections[s].cmdline
				user  = sections[s].cmduser  or "nobody"
				group = sections[s].cmdgroup or "nogroup"

				str = str .. "\t" .. key .. " " .. user .. ":" .. group .. ' "' .. cmd .. "\"\n"
			end
		end
	end

	return str
end

function config_iptables( c )
	local str = ""

	for s in pairs(sections) do
		if sections[s][".type"] == "collectd_iptables_match" then

			search = { }

			for i, k in ipairs( {
				"table", "chain", "target", "protocol", "source", "destination",
				"inputif", "outputif", "options"
			} ) do
				v = sections[s][k]

				if type(v) == "string" then
					if k == "options" then v = ffluci.util.split( v, "%s+", nil, true ) end
					search[k] = v
				end
			end

			for i, rule in ipairs( ipt:find( search ) ) do

				name = sections[s].name:gsub( "%s+", "_" )
				if i > 1 then name = name .. "_(" .. i .. ")" end

				str = str .. "\tChain " .. rule.table .. " " .. rule.chain .. " " .. rule.index .. ' "' .. name .. "\"\n"
			end
		end
	end

	return str
end

function config_network( c )
	local str = ""

	for s in pairs(sections) do
		for key, type in pairs({ Listen="collectd_network_listen", Server="collectd_network_server" }) do
			if sections[s][".type"] == type then

				host = sections[s].host
				port = sections[s].port

				if host then
					if port then
						str = str .. "\t" .. key .. " " .. host .. " " .. port .. "\n"
					else
						str = str .. "\t" .. key .. " " .. host .. "\n"
					end
				end
                        end
                end
        end

	return str .. _string( c["TimeToLive"], "TimeToLive" )
		   .. _string( c["CacheFlush"], "CacheFlush" )
		   .. _bool(   c["Forward"],    "Forward"    )
end


function _list_expand( c, l, nopad )
	local str = ""

	for i, n in ipairs(l) do
		if c[n] then
			if n:find("(%w+)ses") then
				k = n:gsub("(%w+)ses", "%1s")
			else
				k = n:gsub("(%w+)s", "%1")
			end

			str = str .. _expand( c[n], k, nopad )
		end
	end

	return str
end

function _expand( s, n, nopad )
	if type(s) == "string" then
		local str = ""

		for i, v in ipairs( ffluci.util.split( s, "%s+", nil, true ) ) do
			str = str .. _string( v, n, nopad )
		end

		return str
	end
end

function _bool( s, n, nopad )

	local str = ""
	local pad = ""
	if not nopad then pad = "\t" end

	if s and s == "1" then
		str = pad .. n .. " true"
	else
		str = pad .. n .. " false"
	end

	return str .. "\n"
end

function _string( s, n, nopad )

	local str = ""
	local pad = ""
	if not nopad then pad = "\t" end

	if s then
		if s:find("[^%d]") then
			if not s:find("[^%w]") then
				str = pad .. n .. " " .. s
			else
				str = pad .. n .. ' "' .. s .. '"'
			end
		else
			str = pad .. n .. " " .. s
		end

		str = str .. "\n"
	end

	return str
end		


plugins = {
	general = {
		{ "BaseDir", "Include", "PIDFile", "PluginDir", "TypesDB", "Interval", "ReadThreads" },
		{ },
		{ }
	},

	csv	= { 
		{ "DataDir" },
		{ "StoreRates" },
		{ }
	},

	df	= {
		{ },
		{ "IgnoreSelected" },
		{ "Devices", "MountPoints", "FSTypes" }
	},

	disk	= {
		{ },
		{ "IgnoreSelected" },
		{ "Disks" }
	},

	dns	= {
		{ },
		{ },
		{ "Interfaces", "IgnoreSources" }
	},

	email	= {
		{ "SocketFile", "SocketGroup", "SocketPerms", "MaxConns" },
		{ },
		{ }
	},

	exec	= config_exec,

	interface = {
		{ },
		{ "IgnoreSelected" },
		{ "Interfaces" }
	},

	iptables = config_iptables,

	irq	= {
		{ },
		{ "IgnoreSelected" },
		{ "Irqs" }
	},

	logfile	= {
		{ "LogLevel", "File" },
		{ "Timestamp" },
		{ }
	},

	netlink	= {
		{ },
		{ "IgnoreSelected" },
		{ "Interfaces", "VerboseInterfaces", "QDiscs", "Classes", "Filters" }
	},

	network	= config_network,

	processes = {
		{ },
		{ },
		{ "Processes" }
	},

	rrdtool	= {
		{ "DataDir", "StepSize", "HeartBeat", "RRARows", "XFF", "CacheFlush", "CacheTimeout" },
		{ "RRASingle" },
		{ "RRATimespans" }
	},

	tcpconns = {
		{ },
		{ "ListeningPorts" },
		{ "LocalPorts", "RemotePorts" }
	},

	unixsock = {
		{ "SocketFile", "SocketGroup", "SocketPerms" },
		{ },
		{ }
	},

	wireless = {
		{ },
		{ },
		{ }
	},

}


section("general")

for plugin in pairs(plugins) do
	if plugin ~= "general" then
		section( plugin )
	end
end
